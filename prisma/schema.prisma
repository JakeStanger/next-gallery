generator client {
  provider = "prisma-client-js"
  //  previewFeatures = ["nativeTypes"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  images Image[]
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  location  String?
  startTime DateTime
  endTime   DateTime
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  primaryImage   Image? @relation(name: "PrimaryImage", fields: [primaryImageId], references: [id])
  primaryImageId Int?

  images Image[] @relation("ImageGroup")
}

model Image {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String? // @db.Text // TODO: enable when Prisma supports it
  width       Int
  height      Int
  exposure    Float?
  focalLength Int?
  aperture    Float?
  iso         Int?
  cameraModel String?
  timeTaken   DateTime?

  categories   Category[]
  location     Location?   @relation(fields: [locationId], references: [id])
  tags         Tag[]
  priceGroup   PriceGroup? @relation(fields: [priceGroupId], references: [id])
  locationId   Int?
  priceGroupId Int?

  group   Group?  @relation(name: "ImageGroup", fields: [groupId], references: [id])
  groupId Int?
  Group   Group[] @relation("PrimaryImage")
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  images Image[]
}

model Price {
  id          Int    @id @default(autoincrement())
  name        String
  costRegular Float
  costSpecial Float?
  costPostage Float?

  priceGroup   PriceGroup @relation(fields: [priceGroupId], references: [id])
  priceGroupId Int
}

model PriceGroup {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  priceTypeName  String?
  regularName    String?
  specialName    String?
  canPostSpecial Boolean @default(false)

  images Image[]
  prices Price[]
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  images Image[]
}


// == admin login ==

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?   // @db.Text // TODO: enable when Prisma supports it
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
